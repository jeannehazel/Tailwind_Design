/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

var MAX_CACHED_INPUTS = 32;

/**
 * Takes some function `f(input) -> result` and returns a memoized version of
 * `f`.
 *
 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
 * memoization is a dumb-simple, linear least-recently-used cache.
 */
function lruMemoize(f) {
  var cache = [];

  return function(input) {
    for (var i = 0; i < cache.length; i++) {
      if (cache[i].input === input) {
        var temp = cache[0];
        cache[0] = cache[i];
        cache[i] = temp;
        return cache[0].result;
      }
    }

    var result = f(input);

    cache.unshift({
      input,
      result,
    });

    if (cache.length > MAX_CACHED_INPUTS) {
      cache.pop();
    }

    return result;
  };
}

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
var normalize = lruMemoize(function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);
  // Split the path into parts between `/` characters. This is much faster than
  // using `.split(/\/+/g)`.
  var parts = [];
  var start = 0;
  var i = 0;
  while (true) {
    start = i;
    i = path.indexOf("/", start);
    if (i === -1) {
      parts.push(path.slice(start));
      break;
    } else {
      parts.push(path.slice(start, i));
      while (i < path.length && path[i] === "/") {
        i++;
      }
    }
  }

  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
});
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ âPNG

   IHDR   k   k   Gaå>   gAMA  ±è¸a   sRGB ÆŒÈ  PLTE    ÆÔ ØÒ ≠Ó Æ Æ Ø Ø ÆÓ Ø ÆÓ ØÔ Ø ÆÌ ≠Ó ÆÒ ØÌ æˇ ©‚ ØÔ ∞ |ˇ ≠Ó ÆÓ ØÓ ¨Ó ØÚ ØÔ ≠Ó Ø ∞Ò Æ ÆÔ ØÔ Ø ÆÒ ØÚ ØÔ ∞Ò ≠Ó ∞Ò ÆÔ ≠ Æ Æ ≠Ô Ø π˛ ˇˇ ™È ±ˇ ±Ô ∞Ó ¥˜ ¨Ò ©Ô ÆÌ ¨Ó ©˛ ∞Ò ± πÁ ØÛ ±Û ≠Ó ØÔ ≤Ú ±Ò ¥ ªÓ ≠Ò ÆÓ ÆÒ ≠Û ©Ê ≠Ï ≠Ì ØÔ ´Ì ∞ı ∞Ú ±Û ∞Ú ±Û Ø ÆÌ ÆÒ ∞Ò ∞Ú ™Ï ±Û ≥ı ≤Ù ØÚ ≥Ï ≠Ô ≠Ô ∞Û ≠Ô ≠ ∞ ±Û ØÒ Æ ∞Ò ±Û ÆÒ ∞Ú ÆÓ ØÔ ∞Ú ≠Ó Ø ≠Ó ØÔ ∞ ± ≠Ó ∞ ØÓ Ø ≠Ô ≤Ù ≤Ú ¥ı ≠Ô ´Ï ≥ı ±Ù ±Û ≤Ù ∞Ï ≠Ó ∞Ú ≤Ù ∞Ò ØÒ ØÔ ≠Ó ≠Ô ∞Ú ≤ı ∞Ò Ø ÆÓ ±Ú ¥˜ ≤Â Æ ÆÔ ÆÔ ºˇ ≠Ó µ˘ ∂˙ ∂˚ ÆÓ Æ ØÒ ∑¸ ≤Ù ∞Ú π˝ ¥¯ ∏˝ ±Û ≥ı µ¯ π˛ ªˇ ¥˜ ≤ı ±Ú Ø ØÔ ±Ùµπ_±   ñtRNS d\]gXfenY^oFhª^YOWm>l=bbZimkaRl[c_`€˝ıjh5Üâ
	 =!$ gxMx
,*M;^m©H+ÄsÄÔµﬂtnaÊ]‹·`vcÿµZZ≠ÙÚq◊ë}~Ø”◊˝irÆX˜ûiüØwiÒ6•Ùı¶)’∏–∏Öí‘í)œàºΩxi∫n’ç  ãIDAThﬁÌòÁW”Pámö4£SÀﬁî.¶" .@"”Å{·,E'∏D◊Mö¥I ^Íøh+GèxÑ÷$ΩœπœÈßÊ◊>'7…Õ˚æÎ÷!Å@ àHqIÅ)õ÷[ıt∂©†§8v¢ä )Iéºﬁ|s~oû##)eGeELLµâ©T&Æsc4qÀvã†1∑œ§Rk57mH6PfC∏ÆæÈÔ≥ºµÙıøπÍ"ùô2$o–Vµ≈zw^–w^:wyëÑgÒÚπKù˙N¸àuãÜ¶¯ƒÑt2áÈËÒJ¡ X&\êº=LôûêØŸ˙ŸçÜ,b¯öœ'.K¶ÂÈe•ËÛ]&≤FªFÎ∏1é"±≥/f|·óÁXIÃ»%vN·õyy#©∏çZ®÷«%êiáOLâ~ ˆÙ¡˚{ö⁄öˆæ;xö ãS'ßë	qÎ’´6Ÿ)ín>¿˚7;?Ù~ﬂ/áˆ=öüÂÄü?–Lìî}ìjW©ëLk}2…˘Ï…SøﬂÒßN≤?7˘∏5ç4ñ™UïÌ1`-˚'9nâ}‘¯á„çOŸ%éõ‹ﬂÇˆî©ºX5ÈY)áxéì'vÆŸ9!s(%+ΩF›%´6íÑe
ÄÈâ≠´f∂NL0e!HcµUùœ)úAÄ›∂Fj ‚Lan®S·J¶úVèœœ±ık∆ÍYŒÔÛXùT≤r’ˆ£Êã£°GxˆÿÓ5sªèÕÜÍ—ãÊ£€ª™(ù˛z»5<B¯|»u]Ø£™ªve2]ﬁœÄ1˘äüΩ]LÊ.•™Õ©8—-¿‚£8Ä‘M‡©õ∫ ìt.œêØ<à˝pEó.©\°´ √}ÛvÃùè"{~oﬂtg(tôX—bh	€£»∂áq±sò∫≤ÛËª<¯"EÛ{ìÙwÈºlÖ.˙éÌû Ç7ûEë}}#Ñ{∂;¥Bó>ﬂf¿◊‹3Qdœ‰~Ç≈ñØWËbÃÙ∏ ‰èmQd€d å”fÊ?8/ò◊Ê}Û˘Çπo¸≈~¯@Ì~süá˘˛Ç˙^◊#Q◊#™Íòu‘˙f›µûáŸß@ÌøVˆïcWˆïc⁄ˆï´ˆÀ˜µÔó°Œ~Ã7
Wôoj9ﬂÄ:∑Å:èZ1g+
œŸ>ıı≈jŒu~w.˙ù‚í¡üÛﬁ¡XŒ{Å@ Ddæ‘µgû?q    IENDÆB`Ç                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 âPNG

   IHDR   é   é   Á˝0  ˆIDATx⁄ÌùµíıFE’ó˛ﬂ©˘EÃ/`ŒMo·»/c∂s3Ü¶–êò3”ù€¶®vmï˙”®Ô¥æZ´jW∑§È÷™”ß;                       8©j 9ê
Yê&≥:vìŒQêıß\(®Hπ,…v ªSf;˘¸F§&‰AF≈¯_‰ˇuü«à%-^ûıb§1ıÊ++ìπV1…çrüäì%!N=i∆Ñ—¨›8°'*ñ¶7Ô‰ú{Æ*Ú éÃß6ƒ*èdséMÔz\H_uTå˘ÂAúT‘Á!4“c»(Û9§ÒH≈©/‚xi$N/å%≈J•9éàìÃ‹˜4√≤luÆ«”bƒìJ$)≠8y~πgty)4˛º»_˜‚©∞*èJìÑ»K™DõÂTõÒf¯ÜÁ^ø·¢+Ø≤kêØﬁ|˘æ7Óπıçdﬂì%ãX"Qõ¨∫e†Ú$#ŒV§iäãØªÂÒ®R„_EûƒÒ¬Ñ4ë÷Ÿˆ‚‰Èìß^µ—æf/<ÚÃ?ë„·úÇùÙAæÚLíqíô˚>GÂiﬂ@˚Á¨ '¢ª™i‹˛ËùˇDéá3ùAi“ÃÀ‚îm…#Ì≥QiTòUá]ï˘Ê¶,W≠cø¬,©-G≤˛¸√∫ñS_ƒÒ%{¨QnïfÂ§a©™&ë6îëÊ1U¶|Gïß÷èê∂èVõJ1‚$∆œ#ÌìFû£,UJZ¨8Â“$ƒ©˝3»Ìcõ‡∫≤ N-˘ÌSÈû'UyﬂˆIà√ãn8Îe	qRÚPuº8Ä àÉ<àS@@@@@ ƒƒƒƒ@@ú/>˙æÂ Ä q q q q q  q q q q ÁÛw>n9àÄ8Ä8Ä8Ä8Ä80q`“ N:èPàs>ø‡πŒ˝#N>≈µå¸cPq≤dI/~>ûÏàìœì>ÁP¯<qÍí#áõFÓ’WÀY$Bú<VÊ˚„Âüæ’µ'
ª™Íà4íÖUú˙}‚®4∂A>DZÁP∞\eƒô]/L‰§küΩ‹Û¡À„üq&!¬à4ë÷9y≤óá]U’˛F§YF≈â{yz©«/S˚ÖâsR∑◊Aú‹≠4ëﬂ>{ˇÅÆQ~˝ÙùáEﬂÎ≠Àìp_´8^E÷ëM/€ø≥˚gå\„¶7Æ#´»‘züˇâÓíT‚ê‰œ^˛àÒ∑ò«ı~ﬂ„´Pã≠"t“—Ã%~IÎeoÚgaˆwÓ≈≈ˆ:1
S•AùkîÁFûΩÁO/ç?*…bâUö9EAΩPZ⁄Mµ	y¥“»qÈyL•Ú'Ñâ1mÀg*àHxa:›≤Kˆ”„´T°T'íêzÆjCsl´é4µ+ìµ4¡Æ^©ò3Ìˆ#_†<8iÙ˝å<qfì'F/P2¬ƒ®cq¸◊òdâ‰∫dŒ∆qº<…»!¶OöQúŒ £ì˘:Œë‰qdn∂ÌÛ=øÔ≠|fﬁyiß“=zD{]F%Mˇı?∫H_xiß≤<£Bı®≥Tïˇ§¢ûqj…3,êùWX™¨L#"Gƒ)_bfhÄk»îãó<ƒ9˛}
ì*ÀR~ÓË“@*»ÍåìFsf@Zh ôêŸñ                   ¿_∏Ü¬∑Dtü    IENDÆB`Ç                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            